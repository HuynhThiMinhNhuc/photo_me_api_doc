openapi: 3.0.0
info:
  description: |
    This is a sample Petstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: 1.0.1
  title: Swagger Petstore
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HUYNHTHIMINHNHUC_1/PhotoMe/1.0.0
  - url: 'https://petstore.swagger.io/v2'
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
  - name: profile
    description: Everything about your profile
    externalDocs:
      description: Find out more
      url: 'htpp://swagger.io'
  - name: newfeed
    description: Everything about newfeeds
    externalDocs:
      description: Find out more
      url: 'htpp://swagger.io'
paths:
  '/api/account/{id}':
    get:
      tags:
        - account
      summary: Get user information by id
      description: 'd'
      operationId: getUserByID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user ID
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: Created
  /api/comment:
    get:
      tags:
        - comment
      summary: comment the post
      operationId: commentpost
      parameters:
        - name: id_Newfeed
          in: query
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/comment'
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/comment'
        '400':
          description: Invalid status value
    post:
      tags:
        - comment
      summary: Comment to the post
      operationId: comment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/comment'
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/comment'
        '400':
          description: Invalid status value
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id_User:
                  description: id of user who comment
                  type: string
                id_Newfeed:
                  description: id newfeed was commented
                  type: string
                comment:
                  description: comment content
                  type: string
  /api/comment/deletecomment:
    post:
      tags:
        - comment
      summary: Delete comment to the post
      operationId: deletecomment
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid status value
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id_User:
                  description: id of user who comment
                  type: string
                id_Newfeed:
                  description: id newfeed was commented
                  type: string
                comment:
                  description: comment content
                  type: string
  /api/follow/:
    get:
      tags:
        - user
      summary: follow another user
      operationId: followuser
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid status value
  /api/liked/:
    get:
      tags:
        - user
      summary: get like the post
      operationId: getlikepost
      parameters:
        - in: query
          name: id_User
          required: true
          schema:
            type: string
          description: The user ID
        - in: query
          name: id_Newfeed
          required: true
          schema:
            type: string
          description: The newfeed ID
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid status value
    post:
      tags:
        - user
      summary: like the post
      operationId: likepost
      parameters:
        - in: query
          name: id_User
          required: true
          schema:
            type: string
          description: The user ID
        - in: query
          name: id_Newfeed
          required: true
          schema:
            type: string
          description: The newfeed ID
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid status value
  /api/liked/updateliked:
    post:
      tags:
        - user
      summary: update liked in the post
      operationId: updatelikepost
      parameters:
        - in: query
          name: id_User
          required: true
          schema:
            type: string
          description: The user ID
        - in: query
          name: id_Newfeed
          required: true
          schema:
            type: string
          description: The newfeed ID
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid status value
  /login:
    get:
      tags:
        - auth
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation        
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
    get:
      tags: 
        - user
      summary: Get user
      description: This can only be done by the logged in user.
      operationId: getUserById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
          
  /profile:
    post:
      tags:
        - profile
      summary: Create profile
      description: This can only be done by the logged in user.
      operationId: createProfile
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        description: Created profile object
        required: true
    get:
      tags: 
        - profile
      summary: Get user's profile
      description: This can only be done by the logged in user.
      operationId: getProfile
      parameters:
        - name: id_User
          in: query
          description: id of user
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Don't connect or error user
      security:
        - photome_auth:
            - 'write:photome'
            - 'read:photome'
  /profile/name:
    get:
      tags: 
        - profile
      summary: Get profile
      description: This can only be done by the logged in user.
      operationId: getProfiles
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '400':
          description: Don't connect or error user
      security:
        - photome_auth:
            - 'write:photome'
            - 'read:photome'
  /profile/updateprofile:
    post:
      tags: 
        - profile
      summary: Update profile
      description: This can only be done by the logged in user.
      operationId: updateProfile
      responses:
        '200':
          description: Update success
        '400':
          description: Dont update profile user
      security:
        - photome_auth:
            - 'write:photome'
            - 'read:photome'
      requestBody:
        $ref: '#/components/requestBodies/Profile'
  /profile/updatefollow/follow:
    post:
      tags:
        - profile
      summary: Follow user
      description: This can only be done by the logged in user
      operationId: follow
      responses:
        '200':
          description: Follow success
        '400':
          description: Don't follow successfully 
      security:
        - photome_auth:
            - 'write:photome'
            - 'read:photome'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: 
                - id_User
                - id_Follower
              properties:
                id_User:
                  type: string
                id_Follower:
                  type: string
  /profile/updatefollow/unfollow:
    post:
      tags:
        - profile
      summary: Unfollow user
      description: This can only be done by the logged in user
      operationId: unfollow
      responses:
        '200':
          description: Unfollow success
        '400':
          description: Don't unfollow successfully 
      security:
        - photome_auth:
            - 'write:photome'
            - 'read:photome'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: 
                - id_User
                - id_Follower
              properties:
                id_User:
                  type: string
                id_Follower:
                  type: string
                  
  /newfeed:
    get:
      tags:
        - newfeed
      summary: Get newfeeds of user
      description: This can only be done by the logged in user
      operationId: getNewfeed
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Newfeed'
            application/xml:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Newfeed'
        '400':
          description: Don't get newfeeds successfully 
      security:
        - photome_auth:
            - 'write:photome'
            - 'read:photome'
      parameters:
        - in: query
          name: id_User
          description: get newfeeds of user.
          schema:
            type: string
    post:
      tags:
        - newfeed
      summary: Get newfeeds of user
      description: This can only be done by the logged in user
      operationId: postNewfeed
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newfeed'
            application/xml:
              schema:
                $ref: '#/components/schemas/Newfeed'
        '400':
          description: Don't post newfeeds successfully 
      security:
        - photome_auth:
            - 'write:photome'
            - 'read:photome'
      requestBody:
        content:
          application/octet-stream:
            schema:
              properties:
                image: 
                  type: string
                  format: binary
          application/form-data:
            schema:
              type: object
              required: 
                - id_User
                - status
              properties:
                id_User:
                  type: string
                status:
                  type: string
  /newfeed/home:
    get:
      tags: 
        - newfeed
      summary: Get newfeed home
      description: This can only be done by the logged in user
      operationId: getNewfeedHome
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Newfeed'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Newfeed'
      security:
        - photome_auth:
            - 'write:photome'
            - 'read:photome'
  /newfeed/thispost:
    get:
      tags: 
        - newfeed
      summary: Get this post
      description: This can only be done by the logged in user
      operationId: getThisPost
      parameters:
        - in: query
          name: id_Newfeed
          description: id of your post.
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newfeed'
            application/xml:
              schema:
                $ref: '#/components/schemas/Newfeed'
        '400':
          description: Don't get this post successfully
      security:
        - photome_auth:
            - 'write:photome'
            - 'read:photome'
  /newfeed/updatenewfeed:
    post:
      tags:
        - newfeed
      summary: Update newfeed
      description: This can only be done by the logged in user
      operationId: updateNewFeed
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newfeed'
            application/xml:
              schema:
                $ref: '#/components/schemas/Newfeed'
        '400':
          description: Don't update newfeed successfully
      security:
        - photome_auth:
            - 'write:photome'
            - 'read:photome'
      requestBody:
        content:
          application/octet-stream:
            schema:
              properties:
                image: 
                  type: string
                  format: binary
          application/form-data:
            schema:
              type: object
              required: 
                - id_User
                - status
              properties:
                id_User:
                  type: string
                status:
                  type: string
  /newfeed/deletenewfeed:
    post:
      tags:
        - newfeed
      summary: Deletes a newfeed
      operationId: deleteNewfeed
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: 
                - id
              properties:
                id:
                  description: id of newfeed
                  type: string
      responses:
        '200':
          description: Delete newfeed successfully
        '400':
          description: Don't delete newfeed successfully
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        sex:
          type: string
      xml:
        name: User
    Profile:
      type: object
      properties:
        id_User:
          type: string
        birthday:
          type: string
        avatar: 
          type: string
        name: 
          type: string
        sex: 
          type: string
        intro:
          type: string
        job: 
          type: string
        iconjob: 
          type: string  
        post: 
          type: integer
          format: int64
        follow: 
          type: integer
          format: int64
        following: 
          type: integer
          format: int64
        registration_data:
          type: string
          format: date-time
      xml: 
        name: profile
    Follow:
      type: object
      properties:
        id_User:
          type: string
        id_Follower:
          type: array
          items:
            type: string
        id_Following:
          type: array
          items:
            type: string
        registration_data:
          type: string
          format: date-time
    comment:
      type: object
      required:
        - id_User
        - id_Newfeed
      properties:
        id_User:
          type: integer
          format: int32
        id_Newfeed:
          type: integer
          format: int32
        comment:
          type: string
        registration_data:
          type: string
          example: 2023/03/17
    Newfeed:
      type: object
      properties:
        id_User:
          type: string
        status:
          type: string
        image:
          type: string
          format: binary
        like:
          type: integer
          format: int64
        comment:
          type: integer
          format: int64
        id_impact:
          type: string
        allIdReact:
          type: array
          items:
            type: string
        registration_data:
          type: string
          format: date-time
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Profile:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Profile'
        application/xml:
          schema:
            $ref: '#/components/schemas/Profile'
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    photome_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://photome.swagger.io/oauth/dialog'
          scopes:
            'write:photome': modify photos in your account
            'read:photome': read your photos
